import blockchain;

//Cell的data
struct SSTData {
    amount:   Uint128,
    smt_root: Byte32,
    info:     Byte32,
}

//每一个账户的Value
struct AccountValue {
    amount:    Uint128,
    nonce:     Uint64,
    clock_id:  Uint64,
}

//转账目标
struct Target {
    to: Byte32,       //接收方公钥hash
    amount:Uint128,   //转账金额
}

//一次给多个用户转账
vector Targets <Target>;

//一次原始交易
table RawLedgerTransaction {
  type_id:      Byte32,  // 本交易指定的ledger cell的type_id，
  from:         Byte32,  // publickey hash
  nonce:        Uint64,  // 本次交易的nonce
  total_amount: Uint128, // 本次转账总额
  fee:          Uint128, // 给打包者的小费
  targets:      Targets, // 同时给多人转账
}

//交易加上签名
table LegerTransaction {
    raw: RawLedgerTransaction,
    signature: Bytes,
}


//一系列交易
vector LegerTransactionVec <LegerTransaction>;


table LegerTransactionWithFlag {
    flag: byte,                 //用于一些区分
    txs:  LegerTransactionVec,  //本次打包涉及的一系列交易
}

//SMT的更新项
struct SmtUpdateItem {
    key:       Byte32,       //本更新项的Key
    old_value: AccountValue, //本更新项的旧值
    new_value: AccountValue, //本更新项的新值
}

//SMT的MerkleProof
vector SmtProof <byte>;

//一系列更新项
vector SmtUpdateItemVec <SmtUpdateItem>;

//一次更新需要的所有信息
table SmtUpdateAction {
    updates:   SmtUpdateItemVec,     //本次打包涉及的状态更新
    proof:     SmtProof,             //本次打包状态转换的证明
    committer: Byte32,               //本次打包的交易提交者，将会收到所有的手续费
}