// Generated by Molecule 0.7.1

#define MOLECULEC_VERSION 7001
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef SST_H
#define SST_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_SST
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "blockchain.h"

/*
 * Reader APIs
 */

#define                                 MolReader_SSTData_verify(s, c)                  mol_verify_fixed_size(s, 80)
#define                                 MolReader_SSTData_get_amount(s)                 mol_slice_by_offset(s, 0, 16)
#define                                 MolReader_SSTData_get_smt_root(s)               mol_slice_by_offset(s, 16, 32)
#define                                 MolReader_SSTData_get_info(s)                   mol_slice_by_offset(s, 48, 32)
#define                                 MolReader_AccountValue_verify(s, c)             mol_verify_fixed_size(s, 32)
#define                                 MolReader_AccountValue_get_amount(s)            mol_slice_by_offset(s, 0, 16)
#define                                 MolReader_AccountValue_get_nonce(s)             mol_slice_by_offset(s, 16, 8)
#define                                 MolReader_AccountValue_get_timestamp(s)         mol_slice_by_offset(s, 24, 8)
#define                                 MolReader_Target_verify(s, c)                   mol_verify_fixed_size(s, 48)
#define                                 MolReader_Target_get_to(s)                      mol_slice_by_offset(s, 0, 32)
#define                                 MolReader_Target_get_amount(s)                  mol_slice_by_offset(s, 32, 16)
#define                                 MolReader_Targets_verify(s, c)                  mol_fixvec_verify(s, 48)
#define                                 MolReader_Targets_length(s)                     mol_fixvec_length(s)
#define                                 MolReader_Targets_get(s, i)                     mol_fixvec_slice_by_index(s, 48, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_RawLedgerTransaction_verify           (const mol_seg_t*, bool);
#define                                 MolReader_RawLedgerTransaction_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_RawLedgerTransaction_has_extra_fields(s) mol_table_has_extra_fields(s, 5)
#define                                 MolReader_RawLedgerTransaction_get_ledger_cell_typeid(s) mol_table_slice_by_index(s, 0)
#define                                 MolReader_RawLedgerTransaction_get_from(s)      mol_table_slice_by_index(s, 1)
#define                                 MolReader_RawLedgerTransaction_get_nonce(s)     mol_table_slice_by_index(s, 2)
#define                                 MolReader_RawLedgerTransaction_get_total_amount(s) mol_table_slice_by_index(s, 3)
#define                                 MolReader_RawLedgerTransaction_get_to(s)        mol_table_slice_by_index(s, 4)
MOLECULE_API_DECORATOR  mol_errno       MolReader_LegerTransaction_verify               (const mol_seg_t*, bool);
#define                                 MolReader_LegerTransaction_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_LegerTransaction_has_extra_fields(s)  mol_table_has_extra_fields(s, 2)
#define                                 MolReader_LegerTransaction_get_raw(s)           mol_table_slice_by_index(s, 0)
#define                                 MolReader_LegerTransaction_get_signature(s)     mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_LegerTransactionVec_verify            (const mol_seg_t*, bool);
#define                                 MolReader_LegerTransactionVec_length(s)         mol_dynvec_length(s)
#define                                 MolReader_LegerTransactionVec_get(s, i)         mol_dynvec_slice_by_index(s, i)
#define                                 MolReader_SmtUpdateItem_verify(s, c)            mol_verify_fixed_size(s, 96)
#define                                 MolReader_SmtUpdateItem_get_key(s)              mol_slice_by_offset(s, 0, 32)
#define                                 MolReader_SmtUpdateItem_get_old_value(s)        mol_slice_by_offset(s, 32, 32)
#define                                 MolReader_SmtUpdateItem_get_new_value(s)        mol_slice_by_offset(s, 64, 32)
#define                                 MolReader_SmtProof_verify(s, c)                 mol_fixvec_verify(s, 1)
#define                                 MolReader_SmtProof_length(s)                    mol_fixvec_length(s)
#define                                 MolReader_SmtProof_get(s, i)                    mol_fixvec_slice_by_index(s, 1, i)
#define                                 MolReader_SmtProof_raw_bytes(s)                 mol_fixvec_slice_raw_bytes(s)
#define                                 MolReader_SmtUpdateItemVec_verify(s, c)         mol_fixvec_verify(s, 96)
#define                                 MolReader_SmtUpdateItemVec_length(s)            mol_fixvec_length(s)
#define                                 MolReader_SmtUpdateItemVec_get(s, i)            mol_fixvec_slice_by_index(s, 96, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_SmtUpdateAction_verify                (const mol_seg_t*, bool);
#define                                 MolReader_SmtUpdateAction_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_SmtUpdateAction_has_extra_fields(s)   mol_table_has_extra_fields(s, 3)
#define                                 MolReader_SmtUpdateAction_get_txs(s)            mol_table_slice_by_index(s, 0)
#define                                 MolReader_SmtUpdateAction_get_updates(s)        mol_table_slice_by_index(s, 1)
#define                                 MolReader_SmtUpdateAction_get_proof(s)          mol_table_slice_by_index(s, 2)

/*
 * Builder APIs
 */

#define                                 MolBuilder_SSTData_init(b)                      mol_builder_initialize_fixed_size(b, 80)
#define                                 MolBuilder_SSTData_set_amount(b, p)             mol_builder_set_by_offset(b, 0, p, 16)
#define                                 MolBuilder_SSTData_set_smt_root(b, p)           mol_builder_set_by_offset(b, 16, p, 32)
#define                                 MolBuilder_SSTData_set_info(b, p)               mol_builder_set_by_offset(b, 48, p, 32)
#define                                 MolBuilder_SSTData_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_SSTData_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_AccountValue_init(b)                 mol_builder_initialize_fixed_size(b, 32)
#define                                 MolBuilder_AccountValue_set_amount(b, p)        mol_builder_set_by_offset(b, 0, p, 16)
#define                                 MolBuilder_AccountValue_set_nonce(b, p)         mol_builder_set_by_offset(b, 16, p, 8)
#define                                 MolBuilder_AccountValue_set_timestamp(b, p)     mol_builder_set_by_offset(b, 24, p, 8)
#define                                 MolBuilder_AccountValue_build(b)                mol_builder_finalize_simple(b)
#define                                 MolBuilder_AccountValue_clear(b)                mol_builder_discard(b)
#define                                 MolBuilder_Target_init(b)                       mol_builder_initialize_fixed_size(b, 48)
#define                                 MolBuilder_Target_set_to(b, p)                  mol_builder_set_by_offset(b, 0, p, 32)
#define                                 MolBuilder_Target_set_amount(b, p)              mol_builder_set_by_offset(b, 32, p, 16)
#define                                 MolBuilder_Target_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Target_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Targets_init(b)                      mol_fixvec_builder_initialize(b, 1024)
#define                                 MolBuilder_Targets_push(b, p)                   mol_fixvec_builder_push(b, p, 48)
#define                                 MolBuilder_Targets_build(b)                     mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_Targets_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_RawLedgerTransaction_init(b)         mol_table_builder_initialize(b, 512, 5)
#define                                 MolBuilder_RawLedgerTransaction_set_ledger_cell_typeid(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_RawLedgerTransaction_set_from(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_RawLedgerTransaction_set_nonce(b, p, l) mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_RawLedgerTransaction_set_total_amount(b, p, l) mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_RawLedgerTransaction_set_to(b, p, l) mol_table_builder_add(b, 4, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_RawLedgerTransaction_build           (mol_builder_t);
#define                                 MolBuilder_RawLedgerTransaction_clear(b)        mol_builder_discard(b)
#define                                 MolBuilder_LegerTransaction_init(b)             mol_table_builder_initialize(b, 1024, 2)
#define                                 MolBuilder_LegerTransaction_set_raw(b, p, l)    mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_LegerTransaction_set_signature(b, p, l) mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_LegerTransaction_build               (mol_builder_t);
#define                                 MolBuilder_LegerTransaction_clear(b)            mol_builder_discard(b)
#define                                 MolBuilder_LegerTransactionVec_init(b)          mol_builder_initialize_with_capacity(b, 4096, 64)
#define                                 MolBuilder_LegerTransactionVec_push(b, p, l)    mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_LegerTransactionVec_build(b)         mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_LegerTransactionVec_clear(b)         mol_builder_discard(b)
#define                                 MolBuilder_SmtUpdateItem_init(b)                mol_builder_initialize_fixed_size(b, 96)
#define                                 MolBuilder_SmtUpdateItem_set_key(b, p)          mol_builder_set_by_offset(b, 0, p, 32)
#define                                 MolBuilder_SmtUpdateItem_set_old_value(b, p)    mol_builder_set_by_offset(b, 32, p, 32)
#define                                 MolBuilder_SmtUpdateItem_set_new_value(b, p)    mol_builder_set_by_offset(b, 64, p, 32)
#define                                 MolBuilder_SmtUpdateItem_build(b)               mol_builder_finalize_simple(b)
#define                                 MolBuilder_SmtUpdateItem_clear(b)               mol_builder_discard(b)
#define                                 MolBuilder_SmtProof_init(b)                     mol_fixvec_builder_initialize(b, 16)
#define                                 MolBuilder_SmtProof_push(b, p)                  mol_fixvec_builder_push_byte(b, p)
#define                                 MolBuilder_SmtProof_build(b)                    mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_SmtProof_clear(b)                    mol_builder_discard(b)
#define                                 MolBuilder_SmtUpdateItemVec_init(b)             mol_fixvec_builder_initialize(b, 2048)
#define                                 MolBuilder_SmtUpdateItemVec_push(b, p)          mol_fixvec_builder_push(b, p, 96)
#define                                 MolBuilder_SmtUpdateItemVec_build(b)            mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_SmtUpdateItemVec_clear(b)            mol_builder_discard(b)
#define                                 MolBuilder_SmtUpdateAction_init(b)              mol_table_builder_initialize(b, 128, 3)
#define                                 MolBuilder_SmtUpdateAction_set_txs(b, p, l)     mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_SmtUpdateAction_set_updates(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_SmtUpdateAction_set_proof(b, p, l)   mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_SmtUpdateAction_build                (mol_builder_t);
#define                                 MolBuilder_SmtUpdateAction_clear(b)             mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_SSTData[80]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_AccountValue[32] =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Target[48]       =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Targets[4]       =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_RawLedgerTransaction[116] =  {
    0x74, ____, ____, ____, 0x18, ____, ____, ____, 0x38, ____, ____, ____,
    0x58, ____, ____, ____, 0x60, ____, ____, ____, 0x70, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_LegerTransaction[132] =  {
    0x84, ____, ____, ____, 0x0c, ____, ____, ____, 0x80, ____, ____, ____,
    0x74, ____, ____, ____, 0x18, ____, ____, ____, 0x38, ____, ____, ____,
    0x58, ____, ____, ____, 0x60, ____, ____, ____, 0x70, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_LegerTransactionVec[4] =  {0x04, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SmtUpdateItem[96] =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SmtProof[4]      =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SmtUpdateItemVec[4] =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_SmtUpdateAction[28] =  {
    0x1c, ____, ____, ____, 0x10, ____, ____, ____, 0x14, ____, ____, ____,
    0x18, ____, ____, ____, 0x04, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_RawLedgerTransaction_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 5) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 5) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Uint64_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Uint128_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[4];
        inner.size = offsets[5] - offsets[4];
        errno = MolReader_Targets_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_LegerTransaction_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_RawLedgerTransaction_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_LegerTransactionVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_LegerTransaction_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_LegerTransaction_verify(&inner, compatible);
}
MOLECULE_API_DECORATOR mol_errno MolReader_SmtUpdateAction_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_LegerTransactionVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_SmtUpdateItemVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_SmtProof_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_RawLedgerTransaction_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 24;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 8 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 16 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 8 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 16 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 8;
        memcpy(dst, &MolDefault_Uint64, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 16;
        memcpy(dst, &MolDefault_Uint128, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Targets, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_LegerTransaction_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 116 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 116 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 116;
        memcpy(dst, &MolDefault_RawLedgerTransaction, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_SmtUpdateAction_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_LegerTransactionVec, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_SmtUpdateItemVec, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_SmtProof, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_SST
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_SST
#endif /* __DEFINE_MOLECULE_API_DECORATOR_SST */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* SST_H */
